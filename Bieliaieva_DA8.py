# -*- coding: utf-8 -*-
"""Bieliaieva_DA8

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jspoO1tuCUppchxHh5k_L36jvuclqLBh
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import numpy as np
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans

# Region_of_Ukraine                       |`str`|      –û–±–ª–∞—Å—Ç—å –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –º—ñ—Å—Ç–æ –ö–∏—ó–≤.
# Year                                    |`int`|      –†—ñ–∫, –∑–∞ —è–∫–∏–π –Ω–∞–≤–µ–¥–µ–Ω—ñ –µ–∫–æ–Ω–æ–º—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (2022, 2023).
# Region                                  |`str`|      –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–π —Ä–µ–≥—ñ–æ–Ω–∏: `North`, `South`, `East`, `West`.
# Exports(thsd.USD)                       |`float`|    –û–±—Å—è–≥ –µ–∫—Å–ø–æ—Ä—Ç—É –≤ —Ç–∏—Å. –¥–æ–ª.
# Imports(thsd.USD)                       |`float`|    –û–±—Å—è–≥ —ñ–º–ø–æ—Ä—Ç—É –≤ —Ç–∏—Å.–¥–æ–ª.
# Profit_loss_enterprises(mln.UAH)        |`float`|    –ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (–∑–±–∏—Ç–æ–∫) –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –∑–∞ –æ–±–ª–∞—Å—Ç—è–º–∏ –≤ –∑–∞–≥–∞–ª–æ–º –≤ –º–ª–Ω. –≥—Ä–Ω.
# Turnover_of_business_entities(thsd.UAH) |`float`|    –û–±—Å—è–≥ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó (—Ç–æ–≤–∞—Ä—ñ–≤, –ø–æ—Å–ª—É–≥) —Å—É–±‚Äô—î–∫—Ç—ñ–≤ –≥–æ—Å–ø–æ–¥–∞—Ä—é–≤–∞–Ω–Ω—è –∑–∞ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏ –≤ —Ç–∏—Å. –≥—Ä–Ω.
# Capital_investments(thsd.UAH)           |`int`|      –ö–∞–ø—ñ—Ç–∞–ª—å–Ω—ñ —ñ–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó –∑–∞ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏ –≤ —Ç–∏—Å. –≥—Ä–Ω.
# Latitude                                |`float`|    –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ —à–∏—Ä–æ—Ç–∞ –¥–ª—è –º–∞–ø–∏.
# Longitude                               |`float`|    –ì–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∞ –¥–æ–≤–≥–æ—Ç–∞ –¥–ª—è –º–∞–ø–∏.

# –ó–∞–≤–∞–Ω—Ç–∞–∂–∏–º–æ –¥–∞–Ω—ñ
df = pd.read_csv('data.csv', sep=';')

df.info()

df.describe()

missing_data = df.isnull()
for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")

st.set_page_config(
    page_title="–ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': 'https://github.com/streamlit/streamlit/issues',
        'About': '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—á–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É –æ–±–ª–∞—Å—Ç–µ–π –£–∫—Ä–∞—ó–Ω–∏'
    }
)

# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å / SIDEBAR
st.sidebar.title("–ü–∞–Ω–µ–ª—å —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó")

# –§—ñ–ª—å—Ç—Ä–∏
selected_year = st.sidebar.selectbox("–†—ñ–∫", sorted(df["Year"].unique()))
selected_region = st.sidebar.multiselect("–†–µ–≥—ñ–æ–Ω", df["Region"].unique(), default=df["Region"].unique())

selected_max_capital_investment = st.sidebar.slider(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó –ø—Ä–æ–¥—É–∫—Ü—ñ—ó (—Ç–æ–≤–∞—Ä—ñ–≤, –ø–æ—Å–ª—É–≥) —Å—É–±‚Äô—î–∫—Ç—ñ–≤ –≥–æ—Å–ø–æ–¥–∞—Ä—é–≤–∞–Ω–Ω—è",
    min_value=int(df["Turnover_of_business_entities(thsd.UAH)"].min()),
    max_value=int(df["Turnover_of_business_entities(thsd.UAH)"].max()),
    value=int(df["Turnover_of_business_entities(thsd.UAH)"].max()),
    step=100000000
)

# –ß–µ–∫–±–æ–∫—Å–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
show_map = st.sidebar.checkbox("üó∫ –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–∞—Ä—Ç—É –æ–±–ª–∞—Å—Ç–µ–π")

# –ü–µ—Ä–µ–º–∏–∫–∞—á –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
chart_option = st.sidebar.radio(
    "üìà –û–±–µ—Ä—ñ—Ç—å –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:",
    [
        "–°—Ç–æ–≤–ø—á–∞—Å—Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∞: –ï–∫—Å–ø–æ—Ä—Ç vs –Ü–º–ø–æ—Ä—Ç",
        "Boxplot —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (–∑–±–∏—Ç–æ–∫) –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –≤ –æ–±–ª–∞—Å—Ç—è—Ö –£–∫—Ä–∞—ó–Ω–∏ –∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏",
        "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π"
    ]
)

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π –±–ª–æ–∫
st.sidebar.markdown("---")
st.sidebar.markdown(" **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è**: \n–§—ñ–ª—å—Ç—Ä—É–π—Ç–µ –¥–∞–Ω—ñ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —ñ –ø–µ—Ä–µ–≥–ª—è–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ –ø–∞–Ω–µ–ª—ñ –ø—Ä–∞–≤–æ—Ä—É—á.")
st.sidebar.markdown(" **–ê–≤—Ç–æ—Ä**: Bieliaieva_Daria")

# –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è

df_filtered = df[
    (df["Year"] == selected_year) &
    (df["Region"].isin(selected_region))&
    (df["Turnover_of_business_entities(thsd.UAH)"] <= selected_max_capital_investment)
]

# –ë–ª–æ–∫ —Ä–µ–≥—Ä–µ—Å—ñ—ó
st.sidebar.markdown("–ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—ñ—ó")
numeric_columns = df_filtered.select_dtypes(include=np.number).columns.tolist()

reg_x = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É X", numeric_columns, index=0)
reg_y = st.sidebar.selectbox("–û–±–µ—Ä—ñ—Ç—å –∑–º—ñ–Ω–Ω—É Y", numeric_columns, index=1)
show_regression = st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω—É –º–æ–¥–µ–ª—å")

# –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–Ω–µ–ª—å

st.title("üìä –ï–∫–æ–Ω–æ–º—ñ—á–Ω–∏–π –¥–∞—à–±–æ—Ä–¥ –∫–æ–º–ø–∞–Ω—ñ–π")
st.subheader(f"üîç –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {df_filtered.shape[0]} –æ–±–ª–∞—Å—Ç–µ–π")

# –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV
csv = df_filtered.to_csv(index=False).encode("utf-8")
st.download_button(
    label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ CSV",
    data=csv,
    file_name="filtered_regions.csv",
    mime="text/csv"
)

# –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞ —Ç–∞–±–ª–∏—Ü—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

st.subheader("–û–±–µ—Ä—ñ—Ç—å, —è–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏")

all_columns = df_filtered.columns.tolist()
default_columns = ["Region_of_Ukraine", "Region", "Exports(thsd.USD)", "Imports(thsd.USD)", "Capital_investments(thsd.UAH)"]

selected_columns = st.multiselect(
    "–û–±–µ—Ä—ñ—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É",
    options=all_columns,
    default=[col for col in default_columns if col in all_columns]
)

if selected_columns:
    st.dataframe(df_filtered[selected_columns])
else:
    st.info("–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å—Ç–æ–≤–ø–µ—Ü—å, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é.")


# –ö–∞—Ä—Ç–∞ –∫–æ–º–ø–∞–Ω—ñ–π
if show_map:
    st.subheader("üó∫ –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è –æ–±–ª–∞—Å—Ç–µ–π")
    map_data = df_filtered[["Latitude", "Longitude"]].dropna().rename(
        columns={"Latitude": "latitude", "Longitude": "longitude"}
    )
    if not map_data.empty:
        st.map(map_data)
    else:
        st.warning("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ –∫–∞—Ä—Ç–∏.")


# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞
if chart_option == "–°—Ç–æ–≤–ø—á–∞—Å—Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∞: –ï–∫—Å–ø–æ—Ä—Ç vs –Ü–º–ø–æ—Ä—Ç":
    st.subheader("üìä –°—Ç–æ–≤–ø—á–∞—Å—Ç–∞ –¥—ñ–∞–≥—Ä–∞–º–∞: –ï–∫—Å–ø–æ—Ä—Ç vs –Ü–º–ø–æ—Ä—Ç –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö –£–∫—Ä–∞—ó–Ω–∏")

    # –í–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –∫–æ–ª–æ–Ω–∫–∏
    df_bar = df_filtered[["Region_of_Ukraine", "Exports(thsd.USD)", "Imports(thsd.USD)"]].dropna()

    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ long-—Ñ–æ—Ä–º–∞—Ç –¥–ª—è Altair
    df_melted = df_bar.melt(id_vars="Region_of_Ukraine",
                            value_vars=["Exports(thsd.USD)", "Imports(thsd.USD)"],
                            var_name="–¢–∏–ø",
                            value_name="–ó–Ω–∞—á–µ–Ω–Ω—è")

    chart = alt.Chart(df_melted).mark_bar().encode(
        x=alt.X("Region_of_Ukraine:N", sort='-y', title="–û–±–ª–∞—Å—Ç—å"),
        y=alt.Y("–ó–Ω–∞—á–µ–Ω–Ω—è:Q", title="–¢–∏—Å. USD"),
        color=alt.Color("–¢–∏–ø:N", title="–ü–æ–∫–∞–∑–Ω–∏–∫"),
        tooltip=["Region_of_Ukraine:N", "–¢–∏–ø:N", "–ó–Ω–∞—á–µ–Ω–Ω—è:Q"]
    ).properties(
        width=800,
        height=500,
        title="–ï–∫—Å–ø–æ—Ä—Ç —Ç–∞ –Ü–º–ø–æ—Ä—Ç –ø–æ –æ–±–ª–∞—Å—Ç—è—Ö –£–∫—Ä–∞—ó–Ω–∏"
    )

    st.altair_chart(chart, use_container_width=True)

elif chart_option == "Boxplot —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (–∑–±–∏—Ç–æ–∫) –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –≤ –æ–±–ª–∞—Å—Ç—è—Ö –£–∫—Ä–∞—ó–Ω–∏ –∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏":
    st.subheader("üìä Boxplot —á–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ (–∑–±–∏—Ç–æ–∫) –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –≤ –æ–±–ª–∞—Å—Ç—è—Ö –£–∫—Ä–∞—ó–Ω–∏ –∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏")
    fig, ax = plt.subplots(figsize=(10, 5))
    sns.boxplot(data=df_filtered, x="Region", y="Profit_loss_enterprises(mln.UAH)", ax=ax)
    ax.set_title("–†–æ–∑–ø–æ–¥—ñ–ª —á–∏—Å—Ç–æ–≥–æ –ø—Ä–∏–±—É—Ç–∫—É (–∑–±–∏—Ç–∫—É) –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤ –≤ –æ–±–ª–∞—Å—Ç—è—Ö –£–∫—Ä–∞—ó–Ω–∏ –∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏–º–∏ —Ä–µ–≥—ñ–æ–Ω–∞–º–∏")
    st.pyplot(fig)

elif chart_option == "–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π":
    st.subheader("üìä –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π")
    numeric_cols = df_filtered.select_dtypes(include=[np.number])
    corr = numeric_cols.corr()
    fig, ax = plt.subplots(figsize=(10, 6))
    sns.heatmap(corr, annot=True, cmap='coolwarm', fmt=".2f", ax=ax)
    ax.set_title("–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ –º–∞—Ç—Ä–∏—Ü—è —á–∏—Å–ª–æ–≤–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤")
    st.pyplot(fig)

# –ü–æ–±—É–¥–æ–≤–∞ —Ä–µ–≥—Ä–µ—Å—ñ–π–Ω–æ—ó –º–æ–¥–µ–ª—ñ
if show_regression:
    st.subheader(f"üìà –õ—ñ–Ω—ñ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å—ñ—è: {reg_y} ~ {reg_x}")

    df_reg = df_filtered[[reg_x, reg_y]].dropna()

    if df_reg.shape[0] >= 2:
        model = LinearRegression()
        model.fit(df_reg[[reg_x]], df_reg[reg_y])
        y_pred = model.predict(df_reg[[reg_x]])

        coef = model.coef_[0]
        intercept = model.intercept_
        r2 = model.score(df_reg[[reg_x]], df_reg[reg_y])

        st.markdown(f"**–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –Ω–∞—Ö–∏–ª—É (Œ≤):** {coef:.4f}")
        st.markdown(f"**–ó—Å—É–≤ (intercept):** {intercept:.4f}")
        st.markdown(f"**R¬≤:** {r2:.4f}")

        fig, ax = plt.subplots(figsize=(8, 5))
        sns.scatterplot(data=df_reg, x=reg_x, y=reg_y, ax=ax)
        sns.lineplot(x=df_reg[reg_x], y=y_pred, color='red', ax=ax)
        ax.set_title(f"–†–µ–≥—Ä–µ—Å—ñ—è {reg_y} ~ {reg_x}")
        st.pyplot(fig)
    else:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ —Ä–µ–≥—Ä–µ—Å—ñ—ó.")